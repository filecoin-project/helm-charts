# Default values for Sentinel Lily
replicaCount: 2
image:
  repo: "filecoin/lily"
  pullPolicy: "IfNotPresent"
  tag: "latest"
# podManagementPolicy controls the kubernetes rollout policy to apply to
# the deployed statefulset (Note: both daemon and cluster deployment type
# adheres to this policy over all pods)
podManagementPolicy: "Parallel"
labels: {}
release:
  # nameOverride is used to name the instance in external systems. If empty,
  # then the network, environment, and release name values are used with the
  # chart name to generate a name.
  #nameOverride: ""
  network: "mainnet"
  environment: "dev"

# applied to all instances
nodeSelector: {}
tolerations: []
affinity: {}

# importSnapshot controls the initialization of lily state. When
# enabled the deployment will start an init container that may call
# 'lily init' with the url specified. After the init is complete an empty
# file named '_imported' is placed in the data store directory to signify that
# the data store has been imported. The import process will be skipped if this
# file is present.
# Deleting /var/lib/lily/datastore/_imported will force the import to run the
# next time the pod is restarted. This may be useful if lily has fallen
# out of sync for a long period of time.
importSnapshot:
  enabled: true
  url: https://snapshots.mainnet.filops.net/minimal/latest


# How long to wait for lily to start before failing
# Used for all instances
apiWaitTimeout: "60s"

# service monitoring
prometheusOperatorServiceMonitor: true
prometheusPort: ":9991"

# service tracing
jaeger:
  enabled: false
  providerUrl: "" # default: https://{node.status.hostIP}:6831/api/traces
  serviceName: "" # default: include sentinel-lily.instance-name
  samplerRatio: "0.01"

# debug feature config
debug:
  enabled: false
  resources: {}
    #requests:
      #cpu: "8000m"
      #memory: "16Gi"
    #limits:
      #cpu: "8000m"
      #memory: "16Gi"

# applied to all instances
logFormat: "json"
logLevel: "warn"
logLevelNamed: "vm:error,badgerbs:error,actors:warn,pubsub:warn"

# deploymentType may be either `cluster` or `daemon`
deploymentType: "cluster"

cluster:
  # Specify the name of the Queue configuration header to be used
  # by each component. Keep these defaults unless you're providing
  # your own configuration with custom queue names defined.
  queue:
    notifier: "Notifier1"
    worker: "Worker1"

  # storage is a list of storage configurations that will be added to
  # the lily config and used when starting jobs
  storage:
    postgresql: []
    #- name: "postgres-storage-config-name"
      #secretName: "postgresql-secret"
      #secretKey: "url"
      #schema: "lily"
      #applicationName: "lily"
      #poolSize: 20
      #allowUpsert: false
    file: []
    #- name: "csv"
      #format: "CSV"
      #path: "/tmp"

  # jobs is a list of jobs to start on the daemon
  # as a single daemon queueing the jobs in parallel.
  # NOTE: If executing multiple tasks with the same prefix
  # it is highly recommended to execute them in the same job
  # so that local caching can optimize task execution performance.
  jobs: []
  #- command: "watch"
    ##  name of the job as it will be reported in processing reports
    #name: ""
    ##  name of the queue configuration to use for queueing up tasks with
    ## this job's work
    #queue: ""
    ##  name of the storage configuration to use when persisting exported data
    #storage: ""
    ## args to apply to this specific job upon start
    #jobArgs:
    #- "--confidence=10"
    #- "--tasks=blocks,messages,chaineconomics"
    ## args to apply specific to the command being used
    #commandArgs:
    #- "--from=123"
    #- "--to=123"

  notifier:
    # args to apply to this daemon instance upon start
    args: []
    # env varaibles to include in this instance's environment
    env: []

    # configuration is generally derived from other values. if you'd like to
    # override the generated configuration, set `configOverrideEnabled` to `true`
    # and provide the multiline config in `configOverride`
    # configuration is derived from the following fields:
    # - .Values.cluster.storage[]
    # - .Values.cluster.queue.notifier
    configOverrideEnabled: false
    configOverride: |
      # config read by lily
      [Queue]
        [Queue.Workers]
          [Queue.Workers.Worker1]
            [Queue.Workers.Worker1.RedisConfig]
              Network = "tcp"
              Addr = "127.0.0.1:6379"
              Username = ""
              Password = ""
              PasswordEnv = "LILY_REDIS_PASSWORD"
              DB = 0
              PoolSize = 0
            [Queue.Workers.Worker1.WorkerConfig]
              Concurrency = 1
              LoggerLevel = "debug"
              WatchQueuePriority = 5
              FillQueuePriority = 3
              IndexQueuePriority = 1
              WalkQueuePriority = 1
              StrictPriority = false
              ShutdownTimeout = 30000000000
        [Queue.Notifiers]
          [Queue.Notifiers.Notifier1]
            Network = "tcp"
            Addr = "127.0.0.1:6379"
            Username = ""
            Password = ""
            PasswordEnv = "LILY_REDIS_PASSWORD"
            DB = 0
            PoolSize = 0

    # Required resources to run daemon lily as a client (as is the case with the
    # notifier) requires much fewer resources than the indexing worker instances.
    # Please see https://lilium.sh/software/lily/hardware/ for more information.
    resources:
      requests:
        cpu: "8000m"
        memory: "64Gi"
      limits:
        cpu: "8000m"
        memory: "64Gi"

    # volumes enables control over the configuration of attached volumes
    volumes:
      # datastore is the volume used for persisting the daemon state. If disabled
      # then the volume will be set up on the pod's local storage which will is
      # usually too small but useful to avoid managing volume claims.
      # Note: Mainnet persistence will require significant IOPS. Default size of
      # 500Gi will constrain available IOPS. Consider deploying as much as 3000Gi
      # (or 6000Gi if running 'actorstatesminer' tasks) to make maximum available
      # IOPS.
      # Upgrade to storage class io1 for even additional IOPS headroom (up to 64kIOPS).
      # See https://kubernetes.io/docs/concepts/storage/storage-classes/#aws-ebs.
      # The datastore volume is mounted at /var/lib/lily/datastore
      datastore:
        enabled: false
        size: "2000Gi"
        accessModes:
        - "ReadWriteOnce"
        storageClassName: "gp2"
        #dataSource: {}

    pubsub:
      # ipwhitelist maps to Pubsub.IPColocationWhitelist in daemon's config.toml
      ipwhitelist: []

  worker:
    # args to apply to this daemon instance upon start
    args: []
    # env varaibles to include in this instance's environment
    env: []

    # configuration is generally derived from other values. if you'd like to
    # override the generated configuration, set `configOverrideEnabled` to `true`
    # and provide the multiline config in `configOverride`
    # configuration is derived from the following fields:
    # - .Values.cluster.storage[]
    # - .Values.cluster.queues[]
    configOverrideEnabled: false
    configOverride: |
      # config read by lily
      [Queue]
        [Queue.Workers]
          [Queue.Workers.Worker1]
            [Queue.Workers.Worker1.RedisConfig]
              Network = "tcp"
              Addr = "127.0.0.1:6379"
              Username = ""
              Password = ""
              PasswordEnv = "LILY_ASYNQ_REDIS_PASSWORD"
              DB = 0
              PoolSize = 0
            [Queue.Workers.Worker1.WorkerConfig]
              Concurrency = 1
              LoggerLevel = "debug"
              WatchQueuePriority = 5
              FillQueuePriority = 3
              IndexQueuePriority = 1
              WalkQueuePriority = 1
              StrictPriority = false
              ShutdownTimeout = 30000000000
        [Queue.Notifiers]
          [Queue.Notifiers.Notifier1]
            Network = "tcp"
            Addr = "127.0.0.1:6379"
            Username = ""
            Password = ""
            PasswordEnv = "LILY_ASYNQ_REDIS_PASSWORD"
            DB = 0
            PoolSize = 0

    # Required resources to run daemon lily as a client (as is the case with the
    # notifier) requires much fewer resources than the indexing worker instances.
    # Please see https://lilium.sh/software/lily/hardware/ for more information.
    resources:
      requests:
        cpu: "31000m"
        memory: "245Gi"
      limits:
        cpu: "31000m"
        memory: "245Gi"

    # volumes enables control over the configuration of attached volumes
    volumes:
      # datastore is the volume used for persisting the daemon state. If disabled
      # then the volume will be set up on the pod's local storage which will is
      # usually too small but useful to avoid managing volume claims.
      # Note: Mainnet persistence will require significant IOPS. Default size of
      # 500Gi will constrain available IOPS. Consider deploying as much as 3000Gi
      # (or 6000Gi if running 'actorstatesminer' tasks) to make maximum available
      # IOPS.
      # Upgrade to storage class io1 for even additional IOPS headroom (up to 64kIOPS).
      # See https://kubernetes.io/docs/concepts/storage/storage-classes/#aws-ebs.
      # The datastore volume is mounted at /var/lib/lily/datastore
      datastore:
        enabled: false
        size: "2000Gi"
        accessModes:
        - "ReadWriteOnce"
        storageClassName: "gp2"
        #dataSource: {}

    pubsub:
      # ipwhitelist maps to Pubsub.IPColocationWhitelist in daemon's config.toml
      ipwhitelist: []

daemon:
  # args to apply to this daemon instance upon start
  args: []
  # env varaibles to include in this instance's environment
  env: []

  # configuration is generally derived from other values. if you'd like to
  # override the generated configuration, set `configOverrideEnabled` to `true`
  # and provide the multiline config in `configOverride`
  # daemon configuration is derived from the following fields:
  # - .Values.daemon.storage[]
  configOverrideEnabled: false
  configOverride: |
    [API]
      ListenAddress = "/ip4/0.0.0.0/tcp/1234/http"
    [Libp2p]
      ListenAddresses = ["/ip4/0.0.0.0/tcp/1347"]
      ConnMgrLow = 400
      ConnMgrHigh = 500
      ConnMgrGrace = "5m0s"

  # jobs is a list of jobs to start on the daemon
  #jobs:
  #- command: "watch"
    ##  name of the job as it will be reported in processing reports
    #name: ""
    ##  name of the storage configuration to use when persisting exported data
    #storage: ""
    ## args to apply to this specific job upon start
    #jobArgs:
    #- "--confidence=10"
    #- "--tasks=blocks,messages,chaineconomics"
    ## args to apply specific to the command being used
    #commandArgs:
    #- "--from=123"
    #- "--to=123"

  # storage is a list of storage configurations that will be added to
  # the lily config and used when starting jobs
  storage:
    postgresql: []
    #- name: "db"
      #secretName: "postgresql-secret"
      #secretKey: "url"
      #schema: "lily"
      #applicationName: "lily"
      #poolSize: 20
      #allowUpsert: false
    file: []
    #- name: "csv"
      #format: "CSV"
      #path: "/tmp"

  # Required resources to run daemon lily as a client (as is the case with the
  # notifier) requires much fewer resources than the indexing worker instances.
  # Please see https://lilium.sh/software/lily/hardware/ for more information.
  resources:
    requests:
      cpu: "31000m"
      memory: "254Gi"
    limits:
      cpu: "31000m"
      memory: "254Gi"

  # volumes enables control over the configuration of attached volumes
  volumes:
    # datastore is the volume used for persisting the daemon state. If disabled
    # then the volume will be set up on the pod's local storage which will is
    # usually too small but useful to avoid managing volume claims.
    # Note: Mainnet persistence will require significant IOPS. Default size of
    # 500Gi will constrain available IOPS. Consider deploying as much as 3000Gi
    # (or 6000Gi if running 'actorstatesminer' tasks) to make maximum available
    # IOPS.
    # Upgrade to storage class io1 for even additional IOPS headroom (up to 64kIOPS).
    # See https://kubernetes.io/docs/concepts/storage/storage-classes/#aws-ebs.
    # The datastore volume is mounted at /var/lib/lily/datastore
    datastore:
      enabled: false
      size: "2000Gi"
      accessModes:
      - "ReadWriteOnce"
      storageClassName: "gp2"
      #dataSource: {}

  pubsub:
    # ipwhitelist maps to Pubsub.IPColocationWhitelist in daemon's config.toml
    ipwhitelist: []


  # END value-mapped lily config handling

  # START value-mapped redis config

redis:
  architecture: "standalone"

  # END value-mapped redis config
