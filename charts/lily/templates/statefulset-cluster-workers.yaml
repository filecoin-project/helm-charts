---
{{- if eq .Values.deploymentType "cluster" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-lily-worker
  labels:
    {{- include "sentinel-lily.allLabels" . | nindent 4 }}
spec:
  serviceName: {{ .Release.Name }}-lily-worker-service
  replicas: {{ .Values.replicaCount | default 1 }}
  selector:
    matchLabels:
      {{- include "sentinel-lily.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "sentinel-lily.allLabels" . | nindent 8 }}
    spec:
      # we're going to need root for a little while until
      # we can package some helper binaries into the image
      #securityContext:
        #fsGroup: 532
        #runAsNonRoot: true
        #runAsUser: 532
        #runAsGroup: 532
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      imagePullSecrets:
      - name: regcred
      initContainers:
      - name: init-datastore
        image: {{ required "(root).image.repo expected" .Values.image.repo }}:{{ default (printf "v%s" .Chart.AppVersion) .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/bin/sh", "-c"]
        args:
          - |
            set -x

            # generate 6-char random uid to be used in job report names
            if [ ! -f "/var/lib/lily/uid" ]; then
              tr -dc 'a-zA-Z0-9' < /dev/urandom | fold -w ${1:-6} | head -n 1 > /var/lib/lily/uid
            fi

            # create empty keystore
            if [ ! -f "/var/lib/lily/keystore" ]; then
              mkdir -p /var/lib/lily/keystore
            fi

            # import snapshot if enabled
            {{- if .Values.importSnapshot.enabled }}
            if [ -f "/var/lib/lily/datastore/_imported" ]; then
              echo "Skipping import, found /var/lib/lily/datastore/_imported file."
              echo "Ensuring secrets have correct permissions."
              chmod 0600 /var/lib/lily/keystore/*
              exit 0
            fi

            if [ ! -f "/var/lib/lily/datastore/snapshot.car" ]; then
              echo "*** Downloading snapshot from url {{ .Values.importSnapshot.url }}..."
              curl -sL -o ./aria2-1.36.0.deb https://github.com/q3aql/aria2-static-builds/releases/download/v1.36.0/aria2-1.36.0-linux-gnu-64bit-build1.deb
              dpkg -i ./aria2-1.36.0.deb
              rm ./aria2-1.36.0.deb

              (cd /var/lib/lily/datastore && aria2c -x16 -k1M -o snapshot.car {{ .Values.importSnapshot.url }})
              status=$?
              if [ $status -ne 0 ]; then
                rm /var/lib/lily/datastore/snapshot.car
                echo "...download failed: $status"
                exit $status
              fi
            fi


            echo "*** Importing snapshot..."
            lily init --import-snapshot=/var/lib/lily/datastore/snapshot.car
            status=$?
            if [ $status -eq 0 ]; then
              rm /var/lib/lily/datastore/snapshot.car
              touch "/var/lib/lily/datastore/_imported"
            fi

            echo "Ensuring secrets have correct permissions."
            chmod 0600 /var/lib/lily/keystore/*
            exit $status
            {{- end }}
        env:
        - name: GOLOG_LOG_FMT
          value: {{ .Values.logFormat | default "json" | quote }}
        - name: LILY_REPO
          value: "/var/lib/lily"
        volumeMounts:
        - name: repo-volume
          mountPath: /var/lib/lily
        - name: config-volume
          mountPath: /var/lib/lily/config.toml
          subPath: config.toml
          readOnly: true
        {{- if .Values.cluster.worker.volumes.datastore.enabled }}
        - name: worker-datastore-volume
          mountPath: /var/lib/lily/datastore
        {{- end }}
        {{- /* Minimal resources as work is performed in daemon container. */}}
        resources:
          requests:
            cpu: "1000m"
            memory: "4Gi"
          limits:
            cpu: "1000m"
            memory: "4Gi"
      containers:
      - name: worker
        image: {{ required "(root).image.repo expected" .Values.image.repo }}:{{ default (printf "v%s" .Chart.AppVersion) .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["lily"]
        args:
        - daemon
        {{- range .Values.cluster.worker.args }}
        - {{ . }}
        {{- end }}
        env:
        {{- include "sentinel-lily.jaegerTracingEnvvars" . | indent 8 }}
        - name: GOLOG_LOG_FMT
          value: {{ .Values.logFormat | default "json" | quote }}
        - name: GOLOG_LOG_LEVEL
          value: {{ .Values.logLevel | default "info" | quote }}
        {{- if .Values.logLevelNamed }}
        - name: LILY_LOG_LEVEL_NAMED
          value: {{ .Values.logLevelNamed | quote }}
        {{- end }}
        - name: LILY_REPO
          value: "/var/lib/lily"
        - name: LILY_CONFIG
          value: "/var/lib/lily/config.toml"
        - name: LILY_STORAGE_POSTGRESQL_DB_URL
          valueFrom:
            secretKeyRef:
              name: sentinel-postgresql-writer-secrets
              key: url
        {{- range .Values.cluster.worker.storage.postgresql }}
        - name: LILY_STORAGE_POSTGRESQL_{{ .name | upper }}_URL
          valueFrom:
            secretKeyRef:
              name: {{ required "expected secret name which holds postgres connection url" .secretName }}
              key: {{ .secretKey | default "url" }}
        {{- end }}
        {{- with .Values.cluster.worker.env }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        - name: LILY_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sentinel-redis-secret
              key: token
              optional: false
        ports:
        - containerPort: 1234
          name: api
        - containerPort: 1347
          name: p2p
        {{- if .Values.prometheusOperatorServiceMonitor }}
        - containerPort: 9991
          name: metrics
        {{- end }}
        volumeMounts:
        - name: repo-volume
          mountPath: /var/lib/lily
        - name: config-volume
          mountPath: /var/lib/lily/config.toml
          subPath: config.toml
          readOnly: true
        - name: waitjob-script-volume
          mountPath: /var/lib/lily/waitjob.sh
          subPath: waitjob.sh
        {{- if .Values.cluster.worker.volumes.datastore.enabled }}
        - name: worker-datastore-volume
          mountPath: /var/lib/lily/datastore
        {{- end }}
        lifecycle:
          postStart:
            exec:
              command:
                - "/bin/sh"
                - "-c"
                  # lifecycle.postStart.exec.command doesn't accept args
                  # so we execute this script as a multiline string
                - |
                  sleep 1000
                  echo "Waiting for api to become ready..."
                  lily wait-api --timeout={{ .Values.apiWaitTimeout | quote }} > /dev/null 2>&1
                  status=$?
                  if [ $status -ne 0 ]; then
                    exit $status
                  fi

                  lily sync wait
                  status=$?
                  if [ $status -ne 0 ]; then
                    exit $status
                  fi

                  # server is running, now wait for node to settle
                  # TODO: make this less dumb
                  sleep 60

                  echo "Starting workers..."
                  lily job run --storage db tipset-worker --queue Worker1
        resources:
        {{- if .Values.cluster.worker.resources }}
          {{- toYaml .Values.cluster.worker.resources | nindent 10 }}
        {{- else }}
          requests:
            cpu: "8000m"
            memory: "16Gi"
          limits:
            cpu: "8000m"
            memory: "16Gi"
        {{- end }}
      {{- if .Values.debug.enabled }}
      - name: debug
        image: {{ required "(root).image.repo expected" .Values.image.repo }}:{{ default (printf "v%s" .Chart.AppVersion) .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/bin/sh", "-c", "tail -f /dev/null"]
        env:
        - name: LILY_REPO
          value: "/var/lib/lily"
        - name: LILY_CONFIG
          value: "/var/lib/lily/config.toml"
        {{- range .Values.cluster.worker.storage.postgresql }}
        - name: LILY_STORAGE_POSTGRESQL_{{ .name | upper }}_URL
          valueFrom:
            secretKeyRef:
              name: {{ required "must have the secret name which holds postgres connection url" .secretName }}
              key: {{ .secretKey | default "url" }}
        {{- end }}
        - name: LILY_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sentinel-redis-secret
              key: token
              optional: false
        volumeMounts:
        - name: repo-volume
          mountPath: /var/lib/lily
        - name: config-volume
          mountPath: /var/lib/lily/config.toml
          subPath: config.toml
          readOnly: true
        - name: waitjob-script-volume
          mountPath: /var/lib/lily/waitjob.sh
          subPath: waitjob.sh
        {{- if .Values.cluster.worker.volumes.datastore.enabled }}
        - name: worker-datastore-volume
          mountPath: /var/lib/lily/datastore
        {{- end }}
        {{- if .Values.debug.resources }}
        resources:
          {{- toYaml .Values.debug.resources | nindent 10 }}
        {{- end }}
      {{- end }}
      volumes:
      - name: repo-volume
        emptyDir: {}
      - name: config-volume
        configMap:
          name: {{ .Release.Name }}-lily-worker-config
          items:
          - key: config.toml
            path: config.toml
      - name: waitjob-script-volume
        configMap:
          name: {{ .Release.Name }}-lily-waitjob-script
          items:
          - key: waitjob.sh
            path: waitjob.sh
            mode: 0755
  volumeClaimTemplates:
  {{- if .Values.cluster.worker.volumes.datastore.enabled }}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: worker-datastore-volume
    spec:
      accessModes:
      {{- range .Values.cluster.worker.volumes.datastore.accessModes }}
      - {{ . | quote }}
      {{- end }}
      storageClassName: {{ .Values.cluster.worker.volumes.datastore.storageClassName }}
      volumeMode: Filesystem
      resources:
        requests:
          storage: {{ .Values.cluster.worker.volumes.datastore.size | quote }}
      {{- with .Values.cluster.worker.volumes.datastore.dataSource }}
      dataSource:
        {{- toYaml . | nindent 10 }}
      {{- end }}
  {{- end}}
{{- end }}

