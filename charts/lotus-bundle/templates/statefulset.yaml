---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-{{ .Values.application.name }}
  labels:
    app: {{ .Values.application.name }}
{{- with .Values.application.labels }}
{{ toYaml . | indent 4 }}
{{- end }}
spec:
  replicas: {{ .Values.application.replicas }}
  serviceName: {{ .Values.application.name }}
  selector:
    matchLabels:
      app: {{ .Values.application.name }}
      release: {{ .Release.Name }}
  volumeClaimTemplates:
    {{- if .Values.lotus.enabled }}
    - metadata:
        name: lotus-path
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            {{- if .Values.lotus.lite.enabled }}
            storage: 200Gi
            {{- else }}
            storage: 4000Gi
            {{- end }}
    - metadata:
        name: parameter-cache
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
    {{- end }}
    {{- if .Values.ipfs.enabled }}
    - metadata:
        name: ipfs-path
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.ipfs.size }}
    {{- end }}
    {{- if .Values.volumeClaimTemplates }}
{{ toYaml .Values.volumeClaimTemplates | nindent 4 }}
    {{- end }}
  template:
    metadata:
      labels:
        app: {{ .Values.application.name }}
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
{{- with .Values.application.labels }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      securityContext:
        fsGroup: 532
      restartPolicy: Always
      volumes:
        # The wallet, mounted by the wallet importer
        - name: wallets-secret-volume
          secret:
            secretName: {{ .Release.Name }}-wallets
            defaultMode: 0600
        - name: filebeat-config-secret-volume
          secret:
            {{- if .Values.filebeat.external }}
            secretName: {{ .Values.filebeat.externalSecret }}
            {{- else }}
            secretName: {{ .Release.Name }}-filebeat-config
            {{- end }}
            defaultMode: 0600
        # secrets and configmaps, mounted by the application
        {{- range $sec := .Values.application.secrets }}
        - name: {{ $sec.name }}-volume
          secret:
            {{- if $sec.external }}
            secretName: {{ $sec.name }}
            {{- else }}
            secretName: {{ $.Release.Name }}-{{ $sec.name }}
            {{ end }}
            defaultMode: 0600
        {{- end }}
        {{- range $cm := .Values.application.configMaps }}
        - name: {{ $cm.name }}-volume
          configMap:
            {{- if $cm.external }}
            name:  {{ $cm.name }}
            {{- else }}
            name: {{ $.Release.Name }}-{{ $cm.name }}
            {{- end }}
        {{- end }}
        {{- if .Values.filebeat.enabled }}
        # volume where filebeat logs are stored
        - name: filebeat-volume
          emptyDir: {}
        # filebeat secrets and configmaps
        {{- range $sec := .Values.filebeat.secrets }}
        - name: {{ $sec.name }}-filebeat-volume
          secret:
            {{- if $sec.external }}
            secretName: {{ $sec.name }}
            {{- else }}
            secretName: {{ $.Release.Name }}-{{ $sec.name }}
            {{ end }}
            defaultMode: 0600
        {{- end }}
        {{- range $cm := .Values.filebeat.configMaps }}
        - name: {{ $cm.name }}-filebeat-volume
          configMap:
            {{- if $cm.external }}
            name:  {{ $cm.name }}
            {{- else }}
            name: {{ $.Release.Name }}-{{ $cm.name }}
            {{- end }}
        {{- end }}
        {{- end }}
        {{- range .Values.application.storage }}
        {{ toYaml .volume | nindent 8 }}
        {{- end }}
      initContainers:
{{- if gt (len .Values.initContainers) 0 -}}
{{ toYaml .Values.initContainers | nindent 8}}
{{- end }}
      {{- if .Values.lotus.enabled }}
        - name: shared-storage-preparer
          image: {{ .Values.lotus.image }}
          imagePullPolicy: {{ .Values.lotus.imagePullPolicy }}
          securityContext:
            runAsUser: 0
          command: [ "bash", "-c" ]
          args:
            - |
              {{- range $vol := .Values.application.storage }}
              {{- if $vol.subdirPerRelease }}
              mkdir -p {{ $vol.mount }}/{{ $.Release.Namespace }}/{{ $.Release.Name }}
              {{- if $vol.chownLotus }}
              chown fc {{ $vol.mount }}/{{ $.Release.Namespace }}/{{ $.Release.Name }}
              {{- end }}
              {{- else }}
              {{- if $vol.chownLotus }}
              chown fc {{ $vol.mount }}
              {{- end }}
              {{- end }}
              {{- end }}
          volumeMounts:
            {{- range $st := $.Values.application.storage }}
            {{- $vol := index $st.volume 0 }}
            - name: {{ $vol.name }}
              mountPath: {{ $st.mount }}
            {{- end }}
        {{- if .Values.lotus.reset.enabled }}
        - name: reset-datastore
          image: {{ .Values.lotus.image }}
          imagePullPolicy: {{ .Values.lotus.imagePullPolicy }}
          command: [ "bash", "-c" ]
          args:
            - |
              set -xeou pipefail
              pct=$(df -h $LOTUS_PATH | awk '/[0-9]+%/ {print substr($5, 1, length($5)-1)}')
              echo "reset percentage is $RESET_PERCENTAGE"
              echo "The datastore is $pct% full"
              if [[ "$pct" -lt "$RESET_PERCENTAGE" ]]
              then
                echo "not resetting"
              else
                echo "resetting datastore."
                rm -rf "${LOTUS_PATH}/datastore" || echo "datastore does not exist"
              fi
          env:
            - name: LOTUS_PATH
              value: /var/lib/lotus
            - name: RESET_PERCENTAGE
              value: "{{ toString .Values.lotus.reset.percent }}"
          volumeMounts:
            - name: lotus-path
              mountPath: /var/lib/lotus
        {{- end }}
        {{- if not .Values.lotus.lite.enabled }}
        - name: snapshot-importer
          image: {{ .Values.lotus.image }}
          imagePullPolicy: {{ .Values.lotus.imagePullPolicy }}
          command: [ "bash", "-c" ]
          args:
            - |
              set -xeou pipefail
              GATE="$LOTUS_PATH"/datastore/date_initialized
              # Don't init if already initialized.
              if [ ! -f "$GATE" ]; then
                echo importing minimal snapshot
                /usr/local/bin/lotus daemon --import-snapshot "$DOCKER_LOTUS_IMPORT_SNAPSHOT" --halt-after-import
                # Block future inits
                date > "$GATE"
              fi
          env:
            - name: LOTUS_PATH
              value: /var/lib/lotus
            - name: DOCKER_LOTUS_IMPORT_SNAPSHOT
              value: https://snapshots.mainnet.filops.net/minimal/latest
          volumeMounts:
            - name: lotus-path
              mountPath: /var/lib/lotus
            - name: parameter-cache
              mountPath: /var/tmp/filecoin-proof-parameters
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Values.application.container.name }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: {{- toYaml .Values.application.container.command | nindent 12 }}
          args: {{- toYaml .Values.application.container.args | nindent 12 }}
          {{ if .Values.application.container.resources -}}
          resources:
{{ toYaml .Values.application.container.resources | indent 12 }}
          {{ end -}}
          {{ if .Values.application.container.startupProbe -}}
          startupProbe:
{{ toYaml .Values.application.container.startupProbeProbe | indent 12 }}
          {{ end -}}
          {{ if .Values.application.container.livenessProbe -}}
          livenessProbe:
{{ toYaml .Values.application.container.livenessProbe | indent 12 }}
          {{ end -}}
          {{ if .Values.application.container.readinessProbe -}}
          readinessProbe:
{{ toYaml .Values.application.container.readinessProbe | indent 12 }}
          {{ end -}}
          ports:
            {{- with .Values.application.container.ports }}
{{ toYaml . | indent 12 }}
            {{- end }}
          env:
            {{- if .Values.lotus.enabled }}
            - name: LOTUS_PATH
              value: "/var/lib/lotus"
            {{- end }}
            {{- with .Values.application.container.env }}
{{ toYaml . | indent 12 }}
            {{- end }}
          volumeMounts:
            {{- range $sec := .Values.application.secrets }}
            {{- if $sec.mount }}
            - name: {{ $sec.name }}-volume
              mountPath: {{ $sec.mount }}
            {{- end }}
            {{- end }}
            {{- range $cm := .Values.application.configMaps }}
            {{- if $cm.mount }}
            - name: {{ $cm.name }}-volume
              mountPath: {{ $cm.mount }}
            {{- end }}
            {{- end }}
            {{- range $st := $.Values.application.storage }}
            {{- $vol := index $st.volume 0 }}
            - name: {{ $vol.name }}
              mountPath: {{ $st.mount }}
              {{- if $st.subdirPerRelease }}
              subPath: {{ $.Release.Namespace }}/{{ $.Release.Name }}
              {{- end }}
            {{- end }}
            {{- if .Values.lotus.enabled }}
            - name: lotus-path
              mountPath: /var/lib/lotus
              readOnly: true
            {{- end }}
            {{- if .Values.filebeat.enabled }}
            - name: filebeat-volume
              mountPath: {{ .Values.filebeat.path }}
            {{- end }}
        {{- if .Values.lotus.enabled }}
        # lotus sidecar
        - name: lotus
          image: {{ .Values.lotus.image }}
          imagePullPolicy: {{ .Values.lotus.imagePullPolicy }}
          env:
            - name: FILECOIN_PARAMETER_CACHE
              value: /var/tmp/filecoin-proof-parameters
            - name: LOTUS_PATH
              value: /var/lib/lotus
            {{- if .Values.lotus.lite.enabled }}
            - name: FULLNODE_API_INFO
              value: {{ .Values.lotus.lite.backend }}
            {{- end }}
            - name: GOLOG_FORMAT
              value: json
            {{- if .Values.lotus.jaeger }}
            - name: LOTUS_JAEGER_AGENT_HOST
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.hostIP
            - name: LOTUS_JAEGER_AGENT_PORT
              value: "6831"
            {{- end }}
          resources:
            {{- if .Values.lotus.lite.enabled }}
            requests:
              memory: 16Gi
              cpu: 8
            limits:
              memory: 32Gi
              cpu: 16
            {{- else }}
            requests:
              memory: 64Gi
              cpu: 8
            limits:
              memory: 96Gi
              cpu: 16
            {{- end }}
          volumeMounts:
            - name: lotus-path
              mountPath: /var/lib/lotus
            - name: parameter-cache
              mountPath: /var/tmp/filecoin-proof-parameters
            {{- range $st := $.Values.application.storage }}
            {{- $vol := index $st.volume 0 }}
            - name: {{ $vol.name }}
              mountPath: {{ $st.mount }}
              {{- if $st.subdirPerRelease }}
              subPath: {{ $.Release.Namespace }}/{{ $.Release.Name }}
              {{- end }}
            {{- end }}
            {{- if .Values.filebeat.enabled }}
            - name: filebeat-volume
              mountPath: /var/log/lotus
            {{- end }}
          command: [ "bash", "-c" ]
          args:
            - |
              chmod -R o-r $LOTUS_PATH
              chmod -R o-w $LOTUS_PATH
              chmod -R g-r $LOTUS_PATH
              chmod -R g-w $LOTUS_PATH
              /usr/local/bin/lotus daemon {{ if .Values.lotus.lite.enabled }}--lite {{ end }}

        # wallet importer
        # TODO: switch to a wallet server
        - name: wallet-importer
          image: {{ .Values.lotus.image }}
          imagePullPolicy: IfNotPresent
          command: [ "bash", "-c" ]
          args:
            - 'while sleep 60; do for key in /wallets/*; do lotus wallet import "${key}" || true; done; done'
          env:
            - name: LOTUS_PATH
              value: /var/lib/lotus
          volumeMounts:
            - name: wallets-secret-volume
              mountPath: /wallets
              readOnly: true
            - name: lotus-path
              mountPath: /var/lib/lotus
              readOnly: true
        {{- end }}
        {{- if .Values.ipfs.enabled }}
        - name: ipfs
          image: {{ .Values.ipfs.image }}
          imagePullPolicy: {{ .Values.ipfs.imagePullPolicy }}
          ports:
            - protocol: TCP
              containerPort: 4001
              name: libp2p-tcp
            - protocol: UDP
              containerPort: 4001
              name: libp2p-udp
            - protocol: TCP
              containerPort: 8081
              name: libp2p-ws
          volumeMounts:
            - name: ipfs-path
              mountPath: /data/ipfs
        {{- end }}
        {{- if .Values.filebeat.enabled }}
        # filebeat sidecar
        - name: filebeat
          image: {{ .Values.filebeat.image }}
          args:
            - "-e"
            - "-c"
            - "/etc/filebeat/filebeat.yaml"
          volumeMounts:
            - name: filebeat-config-secret-volume
              mountPath: /etc/filebeat
            - name: filebeat-volume
              mountPath: {{ .Values.filebeat.path }}
            {{- if .Values.lotus.enabled }}
            - name: lotus-path
              mountPath: /var/lib/lotus
              readOnly: true
            {{- end }}
            {{- range $sec := .Values.filebeat.secrets }}
            - name: {{ $sec.name }}-filebeat-volume
              mountPath: {{ $sec.mount }}
            {{- end }}
            {{- range $cm := .Values.filebeat.configMaps }}
            - name: {{ $cm.name }}-filebeat-volume
              mountPath: {{ $cm.mount }}
            {{- end }}
        {{- end }}
