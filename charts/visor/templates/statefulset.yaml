---
{{- if .Values.daemon.enabled }}
{{- if or .Values.watch.enabled .Values.walk.enabled }}
  {{- fail "a visor deployment cannot enable more than one mode, please disable one" }}
{{- end }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-visor
  labels:
    app: visor
    suite: sentinel
{{- if .Values.labels }}
{{ toYaml .Values.labels | indent 4 }}
{{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ .Release.Name }}-visor-service
  selector:
    matchLabels:
      app: visor
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: visor
        suite: sentinel
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        heritage: {{ .Release.Service }}
        release: {{ .Release.Name }}
{{- if .Values.labels }}
{{ toYaml .Values.labels | indent 8 }}
{{- end }}
    spec:
      securityContext:
        fsGroup: 532
        runAsNonRoot: true
        runAsUser: 532
        runAsGroup: 532
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
{{- if .Values.daemon.importSnapshot.enabled }}
      - name: chain-import
        image: "{{ .Values.image.repo }}:{{ required "expected image tag to be defined" .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        command: ["bash", "-c"]
        args:
          - |
            if [ -f "/var/lib/visor/datastore/_imported" ]; then
              echo "Skipping import, found /var/lib/visor/datastore/_imported file."
              echo "Ensuring secrets have correct permissions."
              chmod 0600 /var/lib/visor/datastore/keystore/*
              exit 0
            fi

            echo importing snapshot from url {{ .Values.daemon.importSnapshot.url }}
            visor init --import-snapshot={{ .Values.daemon.importSnapshot.url }}
            status=$?

            if [ $status -eq 0 ]; then
              touch "/var/lib/visor/datastore/_imported"
            fi

            echo "Ensuring secrets have correct permissions."
            chmod 0600 /var/lib/visor/datastore/keystore/*

            exit $status
        env:
        - name: GOLOG_LOG_FMT
        {{- if .Values.logFormat }}
          value: {{ .Values.logFormat }}
        {{- else }}
          value: json
        {{- end }}
        - name: VISOR_REPO
          value: /var/lib/visor/datastore
        volumeMounts:
        {{- if .Values.daemon.persistence.datastore.enabled }}
        - name: datastore-volume
          mountPath: /var/lib/visor/datastore
        {{- end }}
{{- end }}
      containers:
      - name: daemon
        image: "{{ .Values.image.repo }}:{{ required "expected image tag to be defined" .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        command:
        - visor
        args:
        - daemon
        env:
        - name: GOLOG_LOG_FMT
        {{- if .Values.logFormat }}
          value: {{ .Values.logFormat }}
        {{- else }}
          value: json
        {{- end }}
        - name: VISOR_REPO
          value: /var/lib/visor/datastore
        ports:
        - containerPort: 1234
          name: api
        - containerPort: 1347
          name: p2p
        - containerPort: 9991
          name: metrics
        volumeMounts:
        {{- if .Values.daemon.persistence.datastore.enabled }}
        - name: datastore-volume
          mountPath: /var/lib/visor/datastore
        {{- end }}
        {{- if .Values.daemon.jobs }}
        lifecycle:
          postStart:
            exec:
              command:
                - "/bin/sh"
                - "-c"
                - |
                  echo "Waiting for api to become ready"

                  visor wait-api --timeout=60s
                  status=$?

                  if [ $status -ne 0 ]; then
                    exit $status
                  fi

                  echo "Starting jobs"

                  {{- range .Values.daemon.jobs }}
                  visor {{ .command }} {{ join " " .args }}
                  {{- end }}
        {{- end }}
{{- if .Values.debug }}
      - name: debug
        image: "{{ .Values.image.repo }}:{{ required "expected image tag to be defined" .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        command: ["sh", "-c", "tail -f /dev/null"]
        volumeMounts:
        {{- if .Values.daemon.persistence.datastore.enabled }}
        - name: datastore-volume
          mountPath: /var/lib/visor/datastore
        {{- end }}
{{- end }}


  volumeClaimTemplates:
  {{- if .Values.daemon.persistence.datastore.enabled }}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: datastore-volume
    spec:
      accessModes:
      {{- range .Values.daemon.persistence.datastore.accessModes }}
      - {{ . | quote }}
      {{- end }}
      storageClassName: {{ .Values.daemon.persistence.datastore.storageClassName }}
      volumeMode: Filesystem
      resources:
        requests:
          storage: {{ .Values.daemon.persistence.datastore.size | quote }}
      {{- with .Values.daemon.persistence.datastore.dataSource }}
      dataSource:
        {{- toYaml . | nindent 10 }}
      {{- end }}
  {{- end}}
{{- end }}

