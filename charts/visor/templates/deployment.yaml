---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-visor
  labels:
    app: visor
    suite: sentinel
{{- if .Values.labels }}
{{ toYaml .Values.labels | indent 4 }}
{{- end }}

spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: visor
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: visor
        suite: sentinel
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        heritage: {{ .Release.Service }}
        release: {{ .Release.Name }}
    spec:
      initContainers:
      - name: setup-postgresql
        image: "postgres:12"
        env:
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.pgSecret }}
                key: password
          - name: PGUSER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.pgSecret }}
                key: user
          - name: PGHOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.pgSecret }}
                key: host
          - name: PGPORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.pgSecret }}
                key: port
          - name: PGDATABASE
            valueFrom:
              secretKeyRef:
                name: {{ .Values.pgSecret }}
                key: database
          - name: POSTGRES_DB
          {{- if .Values.pgDatabase }}
            value: {{ .Values.pgDatabase }}
          {{- else }}
            value: {{ .Release.Namespace }}_{{ .Release.Name | replace "-" "_" }}_sentinel
          {{- end }}
        command: ["/bin/bash", "-c"]
        args: ["echo \"SELECT 'CREATE DATABASE $(POSTGRES_DB)' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '$(POSTGRES_DB)'); \\gexec\" | psql --set=sslmode={{ .Values.pgSSLMode }}"]
      containers:
      - name: visor
        image: "{{ .Values.image.repo }}:{{ .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        {{- if .Values.debug }}
        command: ["/bin/bash", "-c", "sleep 10000"]
        {{- end }}
        args:
          {{- /*
          # Global args
          # debugging args
          */}}
          {{- if and .Values.jaeger .Values.jaeger.enabled }}
          - --tracing={{ .Values.jaeger.enabled }}
          - --jaeger-agent-host={{ .Values.jaeger.host }}
          - --jaeger-agent-port={{ .Values.jaeger.port }}
          - --jaeger-service-name={{ .Values.jaeger.serviceName }}
          {{- if .Values.jaeger.sampler }}
          - --jaeger-sampler-type={{ .Values.jaeger.sampler.type }}
          - --jaeger-sample-param={{ .Values.jaeger.sampler.param }}
          {{- end }}
          {{- end }}
          {{- if .Values.logLevel }}
          - --log-level={{ .Values.logLevel }}
          {{- end }}
          {{- if .Values.logLevelNamed }}
          - --log-level-named={{ .Values.logLevelNamed }}
          {{- end }}
          {{- /*

          # database args
          */}}
          {{- if .Values.pgPoolSize }}
          - --db-pool-size={{ int .Values.pgPoolSize }}
          {{- end }}

          {{- if .Values.pgAppName }}
          - --name={{ .Values.pgAppName | replace "-" "" }}
          {{- end }}
          - --allow-schema-migration={{ .Values.allowAutomaticMigration }}
          {{- /*

          # lens config
          */}}
          {{- if .Values.lens }}
          {{- if .Values.lens.lotusAPI }}
          - --lens=lotus
          {{- end }}
          {{- end }}
          {{- /*

          # mode-specific args
          */}}
          {{- if and .Values.watch.enabled .Values.walk.enabled }}
            {{- fail "a visor deployment cannot do both walk and watch, please disable one" }}
          {{- end }}
          {{- /*

          # watch
          */}}
          {{- if and .Values.watch .Values.watch.enabled }}
          {{- with .Values.watch }}
          - watch
          - --indexhead-confidence={{ int .confidence }}
          {{- if .tasks }}
          - --tasks={{ .tasks | join "," | lower }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- /*

          # walk
          */}}
          {{- if and .Values.walk .Values.walk.enabled }}
          {{- with .Values.walk }}
          - walk
          {{- if .tasks }}
          - --tasks={{ join "," .tasks }}
          {{- end }}
          {{- if .to }}
          - --to={{ int .to }}
          {{- end }}
          {{- if .from }}
          - --from={{ int .from }}
          {{- end }}
          {{- end }}
          {{- end }}
        ports:
          - containerPort: 9991
            name: metrics
        env:
          {{- /*
          # Global env
          */}}
          - name: GOLOG_LOG_FMT
          {{- if .Values.logFormat }}
            value: {{ .Values.logFormat }}
          {{- else }}
            value: json
          {{- end }}
          {{- if .Values.lens }}
          {{- if .Values.lens.lotusAPI }}
          - name: LOTUS_API_MULTIADDR
            value: {{ required "visor:lens.lotusAPI.lotusAPIMultiaddr must be defined" .Values.lens.lotusAPI.lotusAPIMultiaddr }}
          - name: LOTUS_API_TOKEN
            valueFrom:
              secretKeyRef:
          {{- if .Values.lens.lotusAPI.lotusAPITokenSecret }}
                name: {{ .Values.lens.lotusAPI.lotusAPITokenSecret }}
          {{- else }}
                name: {{ .Release.Name }}-jwt-secrets
          {{- end }}
                key: jwt-ro-privs-token
          - name: FULLNODE_API_INFO
            value: "$(LOTUS_API_TOKEN):$(LOTUS_API_MULTIADDR)"
          {{- end }}
          {{- end }}
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.pgSecret }}
                key: password
          - name: PGUSER
            valueFrom:
              secretKeyRef:
                name: postgresql-secrets
                name: {{ .Values.pgSecret }}
                key: user
          - name: PGHOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.pgSecret }}
                key: host
          - name: PGPORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.pgSecret }}
                key: port
          - name: PGDATABASE
          {{- if .Values.pgDatabase }}
            value: {{ .Values.pgDatabase }}
          {{- else }}
            value: {{ .Release.Namespace }}_{{ .Release.Name | replace "-" "_" }}_sentinel
          {{- end }}
          - name: LOTUS_DB
            value: "postgres://$(PGUSER):$(PGPASSWORD)@$(PGHOST):$(PGPORT)/$(PGDATABASE)?sslmode={{ .Values.pgSSLMode }}"

        resources:
{{ toYaml .Values.resources | indent 10 }}
