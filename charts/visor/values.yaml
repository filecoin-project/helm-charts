# Default values for sentinel-visor
replicaCount: 1
image:
  repo: filecoin/sentinel-visor
  tag: "v0.7.5"
  pullPolicy: IfNotPresent
labels: {}
release:
  # nameOverride is used to name the instance in external systems. If empty,
  # then the network, environment, and function values are used with the
  # chart name to generate a name.
  # nameOverride:
  network: mainnet
  environment: dev
  function: indexer

daemon:
  # Set enabled to true to run visor in daemon mode with its own data store
  enabled: true
  args: []
  env: []

  # importSnapshot controls the initialization of the daemon state. When
  # enabled the deployment will start an init container that may call
  # 'visor init' with the url specified. After the init is complete an empty
  # file named '_imported' is placed in the data store directory to signify that
  # the data store has been imported. The import process will be skipped if this
  # file is present.
  # Deleting /var/lib/visor/datastore/_imported will force the import to run the
  # next time the pod is restarted. This may be useful if the daemon has fallen
  # out of sync for a long period of time.
  importSnapshot:
    enabled: true
    url: https://fil-chain-snapshots-fallback.s3.amazonaws.com/mainnet/minimal_finality_stateroots_latest.car

  # volumes enables control over the configuration of attached volumes
  volumes:
    # datastore is the volume used for persisting the daemon state. If disabled
    # then the volume will be set up on the pod's local storage which will is
    # usually too small.
    # Note: Mainnet persistence will require significant IOPS. Default size of
    # 500Gi will constrain available IOPS. Consider deploying as much as 3000Gi
    # to saturate available IOPS for storage class GP2. Upgrade to storage class
    # IO1 for even additional IOPS headroom (up to 64kIOPS).
    # See https://kubernetes.io/docs/concepts/storage/storage-classes/#aws-ebs.
    # The datastore volume is mounted at /var/lib/visor/datastore
    datastore:
      enabled: false
      size: "500Gi"
      accessModes:
      - ReadWriteOnce
      storageClassName: "gp2"
      # dataSource: {}

  # jobs is a list of jobs to start on the daemon
  jobs: []
  # - command: watch
    # name: ""
    # args:
    # - --confidence=10
    # - --tasks=blocks,messages,chaineconomics

  # daemon storage is a list of storage configurations that will be added to
  # the visor config and used when starting jobs
  storage:
    postgresql: []
    # - name: db
      # secretName: postgresql-secret
      # secretKey: url
      # schema: visor
      # applicationName: visor
      # poolSize: 20
      # allowUpsert: false
    file: []
    # - name: csv
      # format: CSV
      # path: /tmp

  # daemon pubsub-specific settings
  pubsub:
    # ipwhitelist maps to Pubsub.IPColocationWhitelist in daemon's config.toml
    ipwhitelist: []

  # daemon resources
  # Note: Running visor on mainnet requires SIGNIFICANT resources (>250Gb RAM)
  # in order to operate comfortably. Test networks may be preferred if resources
  # are limited.
  resources:
    requests:
      cpu: "8000m"
      memory: "16Gi"
    limits:
      cpu: "8000m"
      memory: "16Gi"

# service monitoring
prometheusOperatorServiceMonitor: true
prometheusPort: ":9991"

# service tracing
jaeger:
  enabled: false
  host: ""         # default: node.status.hostIP
  serviceName: ""  # default: include sentinel-visor.instanceName
  port: "6831"
  sampler:
    type: "probabilistic"
    param: "0.0001"

# debug feature config
debug:
  enabled: false
  resources:
    requests:
      cpu: "8000m"
      memory: "16Gi"
    limits:
      cpu: "8000m"
      memory: "16Gi"

logLevel: info
logLevelNamed: "vm:error,badgerbs:error"
logFormat: json

nodeSelector: {}

tolerations: []

affinity: {}
