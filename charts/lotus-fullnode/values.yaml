image:
  repository: travisperson/lotus
  pullPolicy: IfNotPresent
  tag: v0.7.1

prometheusOperatorServiceMonitor: true

importSnapshot:
  # when importSnapshot is enabled prior to the daemon starting a snapshot will
  # be imported into the blockstore
  enabled: false
  # if the snapshot can't be found, the import init container will exit with
  # this status code, if you want the daemon to come back online regardless set
  # this value to `0`
  exitCodeOnMissing: 1

  # this is the claimName of a pvc that will be used for chain importing
  claimName: chain-exports

  # exportRelease is the name of the chain-export release
  exportRelease: ""

  # when set, the network level chain export will be used instead of a namespaced one
  network: ""

ports:
  api: 1234
  libp2p: 1347

# secrets are broken out into three seperate concerns to make rotation easier
# all files copied to the keystore are verifed during the init phase to ensure
# the filename correctly represents the contents.
# note: all secret files must be raw values (lotus-shed and lotus export provide base16 encoded values)
# note: all secrets are copied to a memory backed volume during runtime and are deleted when the pod dies
secrets:
  # both the jwt and libp2p secrets are managed simiarly. when enabled values
  # will be copied from the secretName, if the secretName is not defined a secret
  # will be created. The *_key values should therefore not be changed.
  # when disabled a temporary jwt and/or libp2p key file will be made for the life of
  # the pod. when the pod is deleted the jwt and/or libp2p-host will be rotated when the pod
  # starts again
  jwt:
    enabled: true
    secretName: ""
    # token will be used to lookup a value in the secret and mounted to $LOTUS_PATH/token
    # this is the token which will be available through the exec command
    token_key: jwt-all-privs-token
    # jwts will be used to lookup a value in the secret and mounted to the $LOTUS_PATH/keystore
    # the name of the keystore file is an implementation detail of this chart and the version of
    # lotus it supports
    jwts_key: auth-jwt-private

  libp2p:
    enabled: true
    secretName: ""
    # libp2p will be used to lookup a value in the secret and mounted to the $LOTUS_PATH/keystore
    # the name of the keystore file is an implementation detail of this chart and the version of
    # lotus it supports
    libp2p_key: libp2p-host

  # all wallets must be managed externally to the deployed pod and should then be
  # referenced by their secret name.
  wallets:
    enabled: false
    secretName: ""
    # the keystore value maps the secret key name to keystore under $LOTUS_PATH/keystore/<path>
    # it's the responsability of the operator to properly encode the keystore path name for the
    # wallets
    # please see https://gist.github.com/travisperson/fa7380f24ea16b79f7274cc6d7ba2d40 for more informatio
    # about how lotus encodes keystore filenames
    # keystore:
    # - key: t16otcoguwipz3puid6ilsqh26unpdf4iwocnxywa
    #   path: O5QWY3DFOQWXIMJWN52GG33HOV3WS4D2GNYHK2LEGZUWY43RNAZDM5LOOBSGMNDJO5XWG3TYPF3WC
    keystore: {}

persistence:
  journal:
    enabled: true
    size: "10Gi"
    accessModes:
      - ReadWriteOnce
    storageClassName: "gp2"
  datastore:
    enabled: true
    size: "10Gi"
    accessModes:
      - ReadWriteOnce
    storageClassName: "gp2"

resources: {}

nodeSelector: {}

tolerations: []

affinity: {}
