# This conditional will enable the service accounts if at least one of the secrets (jwt/libp2p) is enabled
# and does not have a secretName set
{{- if or ( and .Values.secrets.libp2p.enabled (not .Values.secrets.libp2p.secretName)) (and .Values.secrets.jwt.enabled (not .Values.secrets.jwt.secretName)) }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-secrets-writer
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Release.Name }}-secrets-writer
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: secrets-writer
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}-secrets-writer
  namespace: {{ .Release.Namespace }}
{{- end }}
{{- if or ( and .Values.secrets.libp2p.enabled (not .Values.secrets.libp2p.secretName)) }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-libp2p-secrets-creator
spec:
  template:
    spec:
      serviceAccountName: {{ .Release.Name }}-secrets-writer
      restartPolicy: Never
      securityContext:
        fsGroup: 532
        runAsNonRoot: true
        runAsUser: 532
        runAsGroup: 532
      containers:
      - name: secrets-creator
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command: ["bash", "-c"]
        args:
          - |
            set -xe
            pushd /tmp/secrets-scratch

            lotus-shed keyinfo new --output "<type>.keyinfo" libp2p-host
            lotus-shed base16 -decode < libp2p-host.keyinfo > /tmp/secrets/libp2p-host

            popd
            exit 0
        volumeMounts:
        - name: secrets-scratch
          mountPath: "/tmp/secrets-scratch"
        - name: secrets
          mountPath: "/tmp/secrets"
      - name: secrets-writer
        image: bitnami/kubectl
        command: ["bash", "-c"]
        args:
          - |
            if kubectl get secret {{ .Release.Name }}-libp2p-secrets; then
              exit 0
            fi

            kubectl create secret generic {{ .Release.Name }}-libp2p-secrets       \
              --from-file=libp2p-host=/tmp/secrets/libp2p-host                     \
              --output=name
        volumeMounts:
        - name: secrets
          mountPath: "/tmp/secrets"
      volumes:
      - name: secrets-scratch
        emptyDir:
          medium: Memory
      - name: secrets
        emptyDir:
          medium: Memory
{{- end }}
{{- if or ( and .Values.secrets.jwt.enabled (not .Values.secrets.jwt.secretName)) }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-jwt-secrets-creator
spec:
  template:
    spec:
      serviceAccountName: {{ .Release.Name }}-secrets-writer
      restartPolicy: Never
      securityContext:
        fsGroup: 532
        runAsNonRoot: true
        runAsUser: 532
        runAsGroup: 532
      containers:
      - name: secrets-creator
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command: ["bash", "-c"]
        args:
          - |
            set -xe
            pushd /tmp/secrets-scratch

            lotus-shed jwt new node
            lotus-shed base16 -decode < jwt-node.jwts > /tmp/secrets/auth-jwt-private
            cp jwt-node.token /tmp/secrets/jwt-all-privs-token

            lotus-shed jwt token --read         --output /tmp/secrets/jwt-ro-privs-token  jwt-node.jwts
            lotus-shed jwt token --read --write --output /tmp/secrets/jwt-rw-privs-token  jwt-node.jwts
            lotus-shed jwt token --sign         --output /tmp/secrets/jwt-so-privs-token  jwt-node.jwts

            popd
            exit 0
        volumeMounts:
        - name: secrets-scratch
          mountPath: "/tmp/secrets-scratch"
        - name: secrets
          mountPath: "/tmp/secrets"
      - name: secrets-writer
        image: bitnami/kubectl
        command: ["bash", "-c"]
        args:
          - |
            if kubectl get secret {{ .Release.Name }}-jwt-secrets; then
              exit 0
            fi

            kubectl create secret generic {{ .Release.Name }}-jwt-secrets          \
              --from-file=auth-jwt-private=/tmp/secrets/auth-jwt-private           \
              --from-file=jwt-all-privs-token=/tmp/secrets/jwt-all-privs-token     \
              --from-file=jwt-ro-privs-token=/tmp/secrets/jwt-ro-privs-token       \
              --from-file=jwt-rw-privs-token=/tmp/secrets/jwt-rw-privs-token       \
              --from-file=jwt-so-privs-token=/tmp/secrets/jwt-so-privs-token       \
              --output=name
        volumeMounts:
        - name: secrets
          mountPath: "/tmp/secrets"
      volumes:
      - name: secrets-scratch
        emptyDir:
          medium: Memory
      - name: secrets
        emptyDir:
          medium: Memory
{{- end }}
