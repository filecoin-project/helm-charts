---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name}}-lotus-daemon-config
  namespace: {{ .Release.Namespace }}
data:
  config.toml: |
{{ .Values.daemonConfig | indent 4 }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-lotus
  labels:
    app: lotus-fullnode-app
{{- with .Values.additionalLabels }}
{{ toYaml . | indent 4 }}
{{- end }}
spec:
  replicas: {{ .Values.replicas }}
  serviceName: {{ .Release.Name }}-lotus-service
  selector:
    matchLabels:
      app: lotus-fullnode-app
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: lotus-fullnode-app
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
{{- with .Values.additionalLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        fsGroup: 532
        runAsNonRoot: true
        runAsUser: 532
        runAsGroup: 532
      volumes:
{{- if and .Values.importSnapshot.enabled (eq .Values.importSnapshot.strategy "volume")}}
      - name: chain-exports
        persistentVolumeClaim:
          claimName: {{ .Values.importSnapshot.claimName }}
{{- end }}
      - name: config-volume
        configMap:
          name: {{ .Release.Name }}-lotus-daemon-config
          items:
          - key: config.toml
            path: config.toml
{{- if .Values.genesis.enabled }}
      - name: genesis-info-volume
        configMap:
          name: {{ .Values.genesis.configMapName }}
          items:
          - key: genesis
            path: genesis
      - name: genesis-volume
        emptyDir:
          medium: Memory
{{- end }}
{{- if .Values.additionalVolumes.enabled | default false }}
      {{ range .Values.additionalVolumes.pvcs }}
      - name: {{ .name }}
        persistentVolumeClaim:
          claimName: {{ .claimName }}
      {{ end }}
{{- end }}
{{- if .Values.secrets.jwt.enabled }}
      - name: jwt-secrets-volume
        secret:
          secretName: {{ .Values.secrets.jwt.secretName }}
          defaultMode: 0600
          items:
          - key: {{ .Values.secrets.jwt.jwts_key }}
            path: MF2XI2BNNJ3XILLQOJUXMYLUMU
      - name: jwt-token-volume
        secret:
          secretName: {{ .Values.secrets.jwt.secretName }}
          defaultMode: 0600
          items:
          - key: {{ .Values.secrets.jwt.token_key }}
            path: token
{{- else }}
      - name: jwt-secrets-volume
        emptyDir:
          medium: Memory
      - name: jwt-token-volume
        emptyDir:
          medium: Memory
{{- end }}
{{- if .Values.secrets.libp2p.enabled }}
      - name: libp2p-secrets-volume
        secret:
          secretName: {{ .Values.secrets.libp2p.secretName }}
          defaultMode: 0600
          items:
          - key: {{ .Values.secrets.libp2p.libp2p_key }}
            path: NRUWE4BSOAWWQ33TOQ
{{- else }}
      - name: libp2p-secrets-volume
        emptyDir:
          medium: Memory
{{- end }}
{{- if .Values.secrets.wallets.enabled }}
      - name: wallets-secrets-volume
        secret:
          secretName: {{ .Values.secrets.wallets.secretName }}
          defaultMode: 0600
{{- end }}
      - name: keystore-volume
        emptyDir:
          medium: Memory
      initContainers:
{{- if and .Values.persistence.datastore.enabled .Values.persistence.datastore.easyReset }}
      - name: datastore-reset
        image: busybox
        command: ["sh","-c"]
        args:
          - |
            set -xe
            if [ -f "/var/lib/lotus/datastore/_reset" ]; then
              echo "Removing datastore"
              rm -rf /var/lib/lotus/datastore/*
            fi
        volumeMounts:
          - name: datastore-volume
            mountPath: /var/lib/lotus/datastore
{{- end }}
{{- if .Values.genesis.enabled }}
      - name: genesis-transfer
        image: "curlimages/curl"
        command: ["sh","-c"]
        args:
          - |
            curl -o /genesis/genesis.car $(cat /genesis-info/genesis)
        volumeMounts:
          - name: genesis-info-volume
            mountPath: /genesis-info
            readOnly: true
          - name: genesis-volume
            mountPath: /genesis
{{- end }}
{{- if not .Values.secrets.jwt.enabled }}
      - name: temp-jwt
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command: ["bash","-c"]
        args:
          - |
            pushd /tmp/

            lotus-shed jwt new node
            lotus-shed base16 -decode < jwt-node.jwts > "/jwt-secrets-volume/MF2XI2BNNJ3XILLQOJUXMYLUMU"
            mv jwt-node.token /jwt-token-volume/token
        volumeMounts:
          - name: jwt-secrets-volume
            mountPath: /jwt-secrets-volume
          - name: jwt-token-volume
            mountPath: /jwt-token-volume
{{- end }}
      - name: keystore-transfer-jwt
        image: busybox
        command: ["sh","-c"]
        args:
          - |
            for key in $(ls /secrets); do
              cp "/secrets/$key" /keystore/
              chmod 0600 "/keystore/$key"
            done
        volumeMounts:
          - name: jwt-secrets-volume
            mountPath: /secrets
            readOnly: true
          - name: keystore-volume
            mountPath: /keystore
{{- if not .Values.secrets.libp2p.enabled }}
      - name: temp-libp2p
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command: ["bash","-c"]
        args:
          - |
            pushd /tmp/

            lotus-shed keyinfo new --output "<type>.keyinfo" libp2p-host
            lotus-shed base16 -decode < libp2p-host.keyinfo > /libp2p-secrets-volume/NRUWE4BSOAWWQ33TOQ

            popd
        volumeMounts:
          - name: libp2p-secrets-volume
            mountPath: /libp2p-secrets-volume
{{- end }}
      - name: keystore-transfer-libp2p
        image: busybox
        command: ["sh","-c"]
        args:
          - |
            for key in $(ls /secrets); do
              cp "/secrets/$key" /keystore/
              chmod 0600 "/keystore/$key"
            done
        volumeMounts:
          - name: libp2p-secrets-volume
            mountPath: /secrets
            readOnly: true
          - name: keystore-volume
            mountPath: /keystore
      - name: keystore-verifier
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["bash", "-c"]
        args:
          - |
            # Exit if anything fails
            set -e

            pushd /keystore
            for key in $(ls .); do
              if [ "$key" == "token" ]; then
                continue
              fi

              echo "Verifying $key"
              lotus-shed keyinfo verify "$key"
            done
            popd
        volumeMounts:
          - name: keystore-volume
            mountPath: /keystore
            readOnly: true
{{- if and .Values.importSnapshot.enabled (eq .Values.importSnapshot.strategy "volume") }}
      - name: lock-and-wait
        image: busybox
        command: ["sh", "-c"]
        args:
          - |
            if [ -f "/var/lib/lotus/datastore/_imported" ]; then
              echo "Skipping import, found /var/lib/lotus/datastore/_imported file."
              exit 0
            fi

            # wait for the write to finish
            ls -alh /chain-exports
            while [ -f /chain-exports/{{ .Values.importSnapshot.exportRelease }}-write.lock ]; do
              echo $(date -Iseconds) " - waiting for write lock to be removed"
              sleep 60
            done

            # take the read lock so the data doesn't change out from under us
            touch /chain-exports/{{ .Values.importSnapshot.exportRelease }}-read-{{ .Release.Namespace }}-{{ .Release.Name }}.lock

        volumeMounts:
        - name: chain-exports
          mountPath: "/chain-exports"
          {{- if .Values.importSnapshot.network }}
          subPath: chain-exports/by-network/{{ .Values.importSnapshot.network }}/
          {{- else }}
          subPath: chain-exports/by-namespace/{{ .Release.Namespace }}/
          {{- end }}
        {{- if .Values.persistence.datastore.enabled }}
        - name: datastore-volume
          mountPath: /var/lib/lotus/datastore
        {{- end }}
{{- end }}
{{- if .Values.importSnapshot.enabled }}
      - name: chain-import
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["bash", "-c"]
        args:
          - |
            if [ -f "/var/lib/lotus/datastore/_imported" ]; then
              echo "Skipping import, found /var/lib/lotus/datastore/_imported file."
              exit 0
            fi

  {{- if eq .Values.importSnapshot.strategy "volume" }}
            if [ ! -f /chain-exports/{{ .Values.importSnapshot.exportRelease }}.car ]; then
              echo "No export was found"
              exit {{ .Values.importSnapshot.exitCodeOnMissing }}
            fi
            echo importing snapshot from volume {{ .Values.importSnapshot.claimName }}
            lotus daemon --bootstrap=false --halt-after-import --import-snapshot=/chain-exports/{{ .Values.importSnapshot.exportRelease }}.car
            status=$?
            rm -f /chain-exports/{{ .Values.importSnapshot.exportRelease }}-read-{{ .Release.Namespace }}-{{ .Release.Name }}.lock
  {{- else if eq .Values.importSnapshot.strategy "url" }}
            echo importing snapshot from url {{ .Values.importSnapshot.url }}
            lotus daemon --bootstrap=false --halt-after-import --import-snapshot={{ .Values.importSnapshot.url }}
            status=$?
  {{- else }}
            echo "error: importSnapshot is enabled, but strategy is unknown."
            status=1
  {{- end }}
            if [ $status -eq 0 ]; then
              touch "/var/lib/lotus/datastore/_imported"
            fi
            exit $status
        volumeMounts:
          - name: config-volume
            mountPath: /var/lib/lotus/config.toml
            subPath: config.toml
            readOnly: true
          - name: jwt-token-volume
            mountPath: /var/lib/lotus/token
            subPath: token
            readOnly: true
          - name: keystore-volume
            mountPath: /var/lib/lotus/keystore
          {{- if .Values.persistence.datastore.enabled }}
          - name: datastore-volume
            mountPath: /var/lib/lotus/datastore
          {{- end }}
          {{- if .Values.persistence.journal.enabled }}
          - name: journal-volume
            mountPath: /var/lib/lotus/journal
          {{- end }}
          {{- if and .Values.importSnapshot.enabled (eq .Values.importSnapshot.strategy "volume") }}
          - name: chain-exports
            mountPath: "/chain-exports"
            {{- if .Values.importSnapshot.network }}
            subPath: chain-exports/by-network/{{ .Values.importSnapshot.network }}/
            {{- else }}
            subPath: chain-exports/by-namespace/{{ .Release.Namespace }}/
            {{- end }}
          {{- end }}
{{- end }}
{{- if .Values.debug }}
      - name: debug
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["sh", "-c", "tail -f /dev/null"]
        volumeMounts:
          - name: config-volume
            mountPath: /var/lib/lotus/config.toml
            subPath: config.toml
            readOnly: true
          - name: jwt-token-volume
            mountPath: /var/lib/lotus/token
            subPath: token
            readOnly: true
          - name: keystore-volume
            mountPath: /var/lib/lotus/keystore
            readOnly: true
          {{- if .Values.persistence.datastore.enabled }}
          - name: datastore-volume
            mountPath: /var/lib/lotus/datastore
          {{- end }}
          {{- if .Values.persistence.journal.enabled }}
          - name: journal-volume
            mountPath: /var/lib/lotus/journal
          {{- end }}
          {{- if .Values.genesis.enabled }}
          - name: genesis-volume
            mountPath: /genesis/
          {{- end }}
{{- end }}
      containers:
{{- if .Values.disputer.enabled}}
      - name: disputer
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/usr/local/bin/lotus"]
        args:
          - chain
          - disputer
          {{- if .Values.disputer.maxFee }}
          - --max-fee={{ .Values.disputer.maxFee }}
          {{- end }}
          - --from={{ .Values.disputer.walletAddr }}
          - start
        env:
          - name: LOTUS_API_MULTIADDR
            value: "/ip4/127.0.0.1/tcp/1234"
          - name: LOTUS_API_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ .Values.secrets.jwt.secretName }}
                key: {{ .Values.secrets.jwt.token_key }}
          - name: FULLNODE_API_INFO
            value: "$(LOTUS_API_TOKEN):$(LOTUS_API_MULTIADDR)"
        {{- with .Values.disputer.env }}
          {{- toYaml . | nindent 10 }}
        {{- end }}
{{- end }}
      - name: daemon
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/usr/local/bin/lotus","daemon"]
        {{- with .Values.daemonArgs }}
        args:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.daemonEnvs}}
        env:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        volumeMounts:
          - name: config-volume
            mountPath: /var/lib/lotus/config.toml
            subPath: config.toml
            readOnly: true
          - name: jwt-token-volume
            mountPath: /var/lib/lotus/token
            subPath: token
            readOnly: true
          - name: keystore-volume
            mountPath: /var/lib/lotus/keystore
          {{- if .Values.persistence.datastore.enabled }}
          - name: datastore-volume
            mountPath: /var/lib/lotus/datastore
          {{- end }}
          {{- if .Values.persistence.journal.enabled }}
          - name: journal-volume
            mountPath: /var/lib/lotus/journal
          {{- end }}
          {{- if .Values.persistence.parameters.enabled }}
          - name: parameters-volume
            mountPath: /var/tmp/filecoin-proof-parameters
          {{- end }}
          {{- if .Values.genesis.enabled }}
          - name: genesis-volume
            mountPath: /genesis/
          {{- end }}
          {{- if .Values.additionalVolumes.enabled }}
          {{- range .Values.additionalVolumes.pvcs }}
          - name: {{ .name }}
            mountPath: {{ .mountPath }}
          {{- end }}
          {{- end }}
        livenessProbe:
          httpGet:
            path: /debug/metrics
            port: api
          initialDelaySeconds: 120
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 6
        readinessProbe:
          httpGet:
            path: /debug/metrics
            port: api
          initialDelaySeconds: 120
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 3
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        ports:
        - containerPort: 1234
          name: api
        - containerPort: 1347
          name: p2p
      {{- if .Values.secrets.wallets.enabled }}
      - name: wallet-importer
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command: ["bash","-c"]
        args:
          - |
            # TODO, if we had any inotify tools we could use that instead of polling.
            while sleep 60; do
              # import keys
              for key in /wallets/*; do
                lotus wallet import "${key}"
              done
              # Not sure how best to delete old keys. I think perhaps we could define an upstream
              # cash-out wallet when wallets are deleted, we would cash out and then delete the key.
              # In the mean time, not doing anything. Old keys will stay here.
              for addr in $(lotus wallet list -a); do
                if [ ! -f "/wallets/${addr}" ]; then
                  echo "please delete $addr manually; it is no longer in the wallet list."
                fi
              done
            done
        env:
          - name: LOTUS_API_MULTIADDR
            value: "/ip4/127.0.0.1/tcp/1234"
          - name: LOTUS_API_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ .Values.secrets.jwt.secretName }}
                key: {{ .Values.secrets.jwt.token_key }}
          - name: FULLNODE_API_INFO
            value: "$(LOTUS_API_TOKEN):$(LOTUS_API_MULTIADDR)"
        volumeMounts:
          - name: wallets-secrets-volume
            mountPath: /wallets
            readOnly: true
      {{- end }}
  {{- if or .Values.persistence.journal.enabled .Values.persistence.datastore.enabled }}
  volumeClaimTemplates:
  {{- if .Values.persistence.datastore.enabled }}
    - metadata:
        name: datastore-volume
      spec:
        accessModes:
        {{- range .Values.persistence.datastore.accessModes }}
        - {{ . | quote }}
        {{- end }}
        {{- if .Values.persistence.datastore.storageClassName }}
        storageClassName: {{ .Values.persistence.datastore.storageClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.datastore.size | quote }}
        {{- with .Values.persistence.datastore.dataSource }}
        dataSource:
          {{- toYaml . | nindent 10 }}
        {{- end }}
  {{- end }}
  {{- if .Values.persistence.journal.enabled }}
    - metadata:
        name: journal-volume
      spec:
        accessModes:
        {{- range .Values.persistence.journal.accessModes }}
        - {{ . | quote }}
        {{- end }}
        {{- if .Values.persistence.journal.storageClassName }}
        storageClassName: {{ .Values.persistence.journal.storageClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.journal.size | quote }}
  {{- end }}
  {{- if .Values.persistence.parameters.enabled }}
    - metadata:
        name: parameters-volume
      spec:
        accessModes:
        {{- range .Values.persistence.parameters.accessModes }}
        - {{ . | quote }}
        {{- end }}
        {{- if .Values.persistence.parameters.storageClassName }}
        storageClassName: {{ .Values.persistence.parameters.storageClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.parameters.size | quote }}
  {{- end }}
  {{- end }}
