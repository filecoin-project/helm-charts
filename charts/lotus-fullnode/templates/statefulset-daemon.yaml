---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name}}-lotus-daemon-config
  namespace: {{ .Release.Namespace }}
data:
  config.toml: |
    [API]
      ListenAddress = "/ip4/0.0.0.0/tcp/1234/http"
    [Libp2p]
      ListenAddresses = ["/ip4/0.0.0.0/tcp/1347"]
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-lotus
  labels:
    app: lotus-fullnode-app
spec:
  # Hard set to a single replica, scaling should be done through additional releases
  replicas: 1
  serviceName: {{ .Release.Name }}-lotus-service
  selector:
    matchLabels:
      app: lotus-fullnode-app
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: lotus-fullnode-app
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
    spec:
      securityContext:
        fsGroup: 532
        runAsNonRoot: true
        runAsUser: 532
        runAsGroup: 532
      volumes:
{{- if .Values.importSnapshot.enabled }}
      - name: chain-exports
        persistentVolumeClaim:
          claimName: {{ .Values.importSnapshot.claimName }}
{{- end }}
      - name: config-volume
        configMap:
          name: {{ .Release.Name }}-lotus-daemon-config
          items:
          - key: config.toml
            path: config.toml
{{- if .Values.secrets.jwt.enabled }}
      - name: jwt-secrets-volume
        secret:
          secretName: {{ default (print .Release.Name "-jwt-secrets") .Values.secrets.jwt.secretName }}
          defaultMode: 0600
          items:
          - key: {{ .Values.secrets.jwt.jwts_key }}
            path: MF2XI2BNNJ3XILLQOJUXMYLUMU
      - name: jwt-token-volume
        secret:
          secretName: {{ default (print .Release.Name "-jwt-secrets") .Values.secrets.jwt.secretName }}
          defaultMode: 0600
          items:
          - key: {{ .Values.secrets.jwt.token_key }}
            path: token
{{- else }}
      - name: jwt-secrets-volume
        emptyDir:
          medium: Memory
      - name: jwt-token-volume
        emptyDir:
          medium: Memory
{{- end }}
{{- if .Values.secrets.libp2p.enabled }}
      - name: libp2p-secrets-volume
        secret:
          secretName: {{ default (print .Release.Name "-libp2p-secrets") .Values.secrets.libp2p.secretName }}
          defaultMode: 0600
          items:
          - key: {{ .Values.secrets.libp2p.libp2p_key }}
            path: NRUWE4BSOAWWQ33TOQ
{{- else }}
      - name: libp2p-secrets-volume
        emptyDir:
          medium: Memory
{{- end }}
{{- if .Values.secrets.wallets.enabled }}
      - name: wallets-secrets-volume
        secret:
          secretName: {{ .Values.secrets.wallets.secretName }}
          defaultMode: 0600
          items:
          {{- range .Values.secrets.wallets.keystore }}
           - key: {{ .key }}
             path: {{ .path }}
          {{- end }}
{{- end }}
      - name: keystore-volume
        emptyDir:
          medium: Memory
      initContainers:
{{- if not .Values.secrets.jwt.enabled }}
      - name: temp-jwt
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command: ["bash","-c"]
        args:
          - |
            pushd /tmp/

            lotus-shed jwt new node
            lotus-shed base16 -decode < jwt-node.jwts > "/jwt-secrets-volume/MF2XI2BNNJ3XILLQOJUXMYLUMU"
            mv jwt-node.token /jwt-token-volume/token
        volumeMounts:
          - name: jwt-secrets-volume
            mountPath: /jwt-secrets-volume
          - name: jwt-token-volume
            mountPath: /jwt-token-volume
{{- end }}
      - name: keystore-transfer-jwt
        image: busybox
        command: ["sh","-c"]
        args:
          - |
            for key in $(ls /secrets); do
              cp "/secrets/$key" /keystore/
              chmod 0600 "/keystore/$key"
            done
        volumeMounts:
          - name: jwt-secrets-volume
            mountPath: /secrets
            readOnly: true
          - name: keystore-volume
            mountPath: /keystore
{{- if not .Values.secrets.libp2p.enabled }}
      - name: temp-libp2p
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command: ["bash","-c"]
        args:
          - |
            pushd /tmp/

            lotus-shed keyinfo new --output "<type>.keyinfo" libp2p-host
            lotus-shed base16 -decode < libp2p-host.keyinfo > /libp2p-secrets-volume/NRUWE4BSOAWWQ33TOQ

            popd
        volumeMounts:
          - name: libp2p-secrets-volume
            mountPath: /libp2p-secrets-volume
{{- end }}
      - name: keystore-transfer-libp2p
        image: busybox
        command: ["sh","-c"]
        args:
          - |
            for key in $(ls /secrets); do
              cp "/secrets/$key" /keystore/
              chmod 0600 "/keystore/$key"
            done
        volumeMounts:
          - name: libp2p-secrets-volume
            mountPath: /secrets
            readOnly: true
          - name: keystore-volume
            mountPath: /keystore
{{- if .Values.secrets.wallets.enabled }}
      - name: keystore-transfer-wallets
        image: busybox
        command: ["sh","-c"]
        args:
          - |
            for key in $(ls /secrets); do
              cp "/secrets/$key" /keystore/
              chmod 0600 "/keystore/$key"
            done
        volumeMounts:
          - name: wallets-secrets-volume
            mountPath: /secrets
            readOnly: true
          - name: keystore-volume
            mountPath: /keystore
{{- end }}
      - name: keystore-verifier
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["bash", "-c"]
        args:
          - |
            # Exit if anything fails
            set -e

            pushd /keystore
            for key in $(ls .); do
              if [ "$key" == "token" ]; then
                continue
              fi

              echo "Verifying $key"
              lotus-shed keyinfo verify "$key"
            done
            popd
        volumeMounts:
          - name: keystore-volume
            mountPath: /keystore
            readOnly: true
{{- if .Values.importSnapshot.enabled }}
      - name: lock-and-wait
        image: busybox
        command: ["sh", "-c"]
        args:
          - |
            # wait for the write to finish
            ls -alh /chain-exports
            while [ -f /chain-exports/{{ .Values.importSnapshot.exportRelease }}-write.lock ]; do
              echo $(date -Iseconds) " - waiting for write lock to be removed"
              sleep 60
            done

            # take the read lock so the data doesn't change out from under us
            touch /chain-exports/{{ .Values.importSnapshot.exportRelease }}-read-{{ .Release.Namespace }}-{{ .Release.Name }}.lock

        volumeMounts:
        - name: chain-exports
          mountPath: "/chain-exports"
          {{- if .Values.importSnapshot.network }}
          subPath: chain-exports/by-network/{{ .Values.importSnapshot.network }}/
          {{- else }}
          subPath: chain-exports/by-namespace/{{ .Release.Namespace }}/
          {{- end }}
      - name: chain-import
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["bash", "-c"]
        args:
          - |
            if [ ! -f /chain-exports/{{ .Values.importSnapshot.exportRelease }}.car ]; then
              echo "No export was found"
              exit {{ .Values.importSnapshot.exitCodeOnMissing }}
            fi
            lotus daemon --bootstrap=false --halt-after-import --import-snapshot=/chain-exports/{{ .Values.importSnapshot.exportRelease }}.car
            rm -f /chain-exports/{{ .Values.importSnapshot.exportRelease }}-read-{{ .Release.Namespace }}-{{ .Release.Name }}.lock
        volumeMounts:
          - name: config-volume
            mountPath: /var/lib/lotus/config.toml
            subPath: config.toml
            readOnly: true
          - name: jwt-token-volume
            mountPath: /var/lib/lotus/token
            subPath: token
            readOnly: true
          - name: keystore-volume
            mountPath: /var/lib/lotus/keystore
            readOnly: true
          {{- if .Values.persistence.datastore.enabled }}
          - name: datastore-volume
            mountPath: /var/lib/lotus/datastore
          {{- end }}
          {{- if .Values.persistence.journal.enabled }}
          - name: journal-volume
            mountPath: /var/lib/lotus/journal
          {{- end }}
          - name: chain-exports
            mountPath: "/chain-exports"
            {{- if .Values.importSnapshot.network }}
            subPath: chain-exports/by-network/{{ .Values.importSnapshot.network }}/
            {{- else }}
            subPath: chain-exports/by-namespace/{{ .Release.Namespace }}/
            {{- end }}
{{- end }}
{{- if .Values.debug }}
      - name: debug
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["sh", "-c", "tail -f /dev/null"]
        volumeMounts:
          - name: config-volume
            mountPath: /var/lib/lotus/config.toml
            subPath: config.toml
            readOnly: true
          - name: jwt-token-volume
            mountPath: /var/lib/lotus/token
            subPath: token
            readOnly: true
          - name: keystore-volume
            mountPath: /var/lib/lotus/keystore
            readOnly: true
          {{- if .Values.persistence.datastore.enabled }}
          - name: datastore-volume
            mountPath: /var/lib/lotus/datastore
          {{- end }}
          {{- if .Values.persistence.journal.enabled }}
          - name: journal-volume
            mountPath: /var/lib/lotus/journal
          {{- end }}
{{- end }}
      containers:
      - name: daemon
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/usr/local/bin/lotus","daemon"]
        volumeMounts:
          - name: config-volume
            mountPath: /var/lib/lotus/config.toml
            subPath: config.toml
            readOnly: true
          - name: jwt-token-volume
            mountPath: /var/lib/lotus/token
            subPath: token
            readOnly: true
          - name: keystore-volume
            mountPath: /var/lib/lotus/keystore
            readOnly: true
          {{- if .Values.persistence.datastore.enabled }}
          - name: datastore-volume
            mountPath: /var/lib/lotus/datastore
          {{- end }}
          {{- if .Values.persistence.journal.enabled }}
          - name: journal-volume
            mountPath: /var/lib/lotus/journal
          {{- end }}
        livenessProbe:
          httpGet:
            path: /debug/metrics
            port: api
          initialDelaySeconds: 120
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 6
        readinessProbe:
          httpGet:
            path: /debug/metrics
            port: api
          initialDelaySeconds: 120
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 3
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        ports:
        - containerPort: 1234
          name: api
        - containerPort: 1347
          name: p2p
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if or .Values.persistence.journal.enabled .Values.persistence.datastore.enabled }}
  volumeClaimTemplates:
  {{- if .Values.persistence.datastore.enabled }}
    - metadata:
        name: datastore-volume
      spec:
        accessModes:
        {{- range .Values.persistence.datastore.accessModes }}
        - {{ . | quote }}
        {{- end }}
        storageClassName: {{ .Values.persistence.datastore.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.persistence.datastore.size | quote }}
  {{- end }}
  {{- if .Values.persistence.journal.enabled }}
    - metadata:
        name: journal-volume
      spec:
        accessModes:
        {{- range .Values.persistence.journal.accessModes }}
        - {{ . | quote }}
        {{- end }}
        storageClassName: {{ .Values.persistence.journal.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.persistence.journal.size | quote }}
  {{- end }}
  {{- end }}
