# This conditional will enable the service accounts if at least one of the secrets (jwt/libp2p) is enabled
{{- if or .Values.secrets.libp2p.enabled .Values.secrets.jwt.enabled }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-secrets-writer
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Release.Name }}-secrets-writer
rules:
- apiGroups: 
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Release.Name }}-secrets-writer
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: {{ .Release.Name }}-secrets-writer
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}-secrets-writer
  namespace: {{ .Release.Namespace }}
{{- end }}
{{- if .Values.secrets.libp2p.enabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-libp2p-secrets-creator
spec:
  template:
    spec:
      serviceAccountName: {{ .Release.Name }}-secrets-writer
      restartPolicy: Never
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      containers:
      - name: secrets-creator
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command: ["bash", "-c"]
        args:
          - |
            set -xe
            pushd /tmp/secrets-scratch

            lotus-shed keyinfo new --output "<type>.keyinfo" libp2p-host
            lotus-shed base16 -decode < libp2p-host.keyinfo > /tmp/secrets/libp2p-host

            popd
            exit 0
        volumeMounts:
        - name: secrets-scratch
          mountPath: "/tmp/secrets-scratch"
        - name: secrets
          mountPath: "/tmp/secrets"
      - name: secrets-writer
        image: bitnami/kubectl
        command: ["bash", "-c"]
        args:
          - |
            if kubectl get secret {{ default (print .Release.Name "-libp2p-secrets") .Values.secrets.libp2p.secretName }}; then
              exit 0
            fi

            kubectl create secret generic {{ default (print .Release.Name "-libp2p-secrets") .Values.secrets.libp2p.secretName }}  \
              --from-file=libp2p-host=/tmp/secrets/libp2p-host                                                                     \
              --output=name
        volumeMounts:
        - name: secrets
          mountPath: "/tmp/secrets"
      volumes:
      - name: secrets-scratch
        emptyDir:
          medium: Memory
      - name: secrets
        emptyDir:
          medium: Memory
{{- end }}
{{- if .Values.secrets.jwt.enabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-jwt-secrets-creator
spec:
  template:
    spec:
      serviceAccountName: {{ .Release.Name }}-secrets-writer
      restartPolicy: Never
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      containers:
      - name: secrets-creator
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command: ["bash", "-c"]
        args:
          - |
            set -xe
            pushd /tmp/secrets-scratch

            lotus-shed jwt new node
            lotus-shed base16 -decode < jwt-node.jwts > /tmp/secrets/auth-jwt-private
            cp jwt-node.token /tmp/secrets/jwt-all-privs-token

            lotus-shed jwt token --read         --output /tmp/secrets/jwt-ro-privs-token  jwt-node.jwts
            lotus-shed jwt token --read --write --output /tmp/secrets/jwt-rw-privs-token  jwt-node.jwts
            lotus-shed jwt token --sign         --output /tmp/secrets/jwt-so-privs-token  jwt-node.jwts

            popd
            exit 0
        volumeMounts:
        - name: secrets-scratch
          mountPath: "/tmp/secrets-scratch"
        - name: secrets
          mountPath: "/tmp/secrets"
      - name: secrets-writer
        image: bitnami/kubectl
        command: ["bash", "-c"]
        args:
          - |
            if kubectl get secret {{ default (print .Release.Name "-jwt-secrets") .Values.secrets.jwt.secretName }}; then
              exit 0
            fi

            kubectl create secret generic {{ default (print .Release.Name "-jwt-secrets") .Values.secrets.jwt.secretName }}   \
              --from-file=auth-jwt-private=/tmp/secrets/auth-jwt-private                                                      \
              --from-file=jwt-all-privs-token=/tmp/secrets/jwt-all-privs-token                                                \
              --from-file=jwt-ro-privs-token=/tmp/secrets/jwt-ro-privs-token                                                  \
              --from-file=jwt-rw-privs-token=/tmp/secrets/jwt-rw-privs-token                                                  \
              --from-file=jwt-so-privs-token=/tmp/secrets/jwt-so-privs-token                                                  \
              --output=name
        volumeMounts:
        - name: secrets
          mountPath: "/tmp/secrets"
      volumes:
      - name: secrets-scratch
        emptyDir:
          medium: Memory
      - name: secrets
        emptyDir:
          medium: Memory
{{- end }}
